#!/bin/sh

# PLEASE SUBMIT BUGS AND REQUESTS AT:
# 	https://github.com/estrabd/vee/issues

version=1.00

if [ ! "$EDITOR" ]; then
  EDITOR=vi
fi
margin=64
format=html
index=vee.html
dir=.vee
draft="$dir/.vee.tmp.$$"
date=$(date)
year=$(date "+%Y")
time=$(date "+%Y-%m-%dT%H:%M:%S")
sec=$(date "+%s")
title=
default_title="Entry #$sec";
headertxt=  # text or $(cat some.header.txt)
footertxt="Powered by <a href=\"http://www.0x743.com/vee\">vee</a><br/>Copyright &copy; 2006-$year"  
top_tpl=./vee-top.tpl
bot_tpl=./vee-bottom.tpl
preformat_hook=./vee-pre # the hook is assumed to be executable, else it is ignored
use_editor=1
listenstdin=0
sort_newest="sort -t. -nr"         # sorts all new to old 
sort_oldest="sort -t. -r"          # sorts all old to new
published=$(date "+%m/%d/%y")       # date formated for index page entry
output_top=output_top
output_bot=output_bottom

# define custom formatting define custom functions file; see example in # vee/sample-custom-format/vee-custom.sh
format_func=format_with_groff
format_dispatcher=default_set_format_func       
format_custom_dispatcher=custom_set_format_func
format_custom_defs=./vee-custom.sh # path is relative to -d dir, where .veerc resides

update_index=default_update_index
custom_setup=default_setup   

#
# vee is a zero configuration, commandline blog tool that
# requires NO installation other than dropping the vee 
# script into your ~/bin, or someother directory in your PATH
#
# vee accepts input when in batch mode (-b), so it is well 
# suited for use in batch situations, such as in a cronjob 
#

# System utilities required via PATH:
# cat cd date env find fold grep groff head ls pwd sort tail which

# change log
# Applied patch from efbeha@gmail.com: 
#   added code to keep words whole when using fold
#   added code to remove extraneous lines from groff
# made sort options customizable
# made publish date format customizable
# initial implementation of pre format hook
# externalized the use of custom formats
# added ability to edit and reformat any post

 disclaimer()
{ echo "Copyright (c) 2007 /me" 
  echo "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:"
  echo "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."
  echo "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
}

#
# vee - the minimal, zero configuration command line blog thingy
#
# Contact (bugs, patches, suggestions)
#  estrabd+vee 'at' gmail
# 
# Instructions:
#  1. put in directory accessible via PATH
#  2. go to a web visible directory and type 'vee'
#  3. put in your title and write your post in vi
#  4. tell your mom to visit: http://..../yourdir/vee.html
#
# Tips:
#
# 1 You can force the index to be index.html using "-I", or 
#   you can specify the index with "-i somefile.html". But,
#   if you do this, you'll have to specify this for all other
#   commands, otherwise vee defaults to vee.html 
#
# 2 vee respects your EDITOR environmental variable 
#
# 3 What you do with vee.html or the formatting is up to you :)
#

# CREDITS
#  Francois Saint-Jacques (fsaintjacques@networkdump.com) supplied 2nd patch ever :) 
#  efbeha (efbeha@gmail.com) - supplied first patch ever :)
#  Oliver @ forums.bsdnexus.com
#  arun   @ chat.taucher.net #bsd
#  J65nko @ bsdforums.com

 default_set_format_func()
{ case "$1" in
    default) format_func=format_with_groff
             echo using $format_func
             ;;
    groff)   format_func=format_with_groff
             echo using $format_func
             ;;
    fold)    format_func=format_with_fold
             echo using $format_func
             ;;
    none)    format_func=with_no_formatting
             echo using $format_func
             ;;
             # if not a supplied format, see if it is in the custom format file, if it exists
    *)       if [ -e "$format_custom_defs" ]; then
               # call dispatch function that is defined in
               # the custom format file, pass on format nickname
               $format_custom_dispatcher "$1"
             else
               echo "bad format type" 
               die_cleanly
             fi
  esac 
}

 usage()
{ echo "                                                                              " 
  echo " vee - the Zero-conf, commandline blog tool thingy                            "
  echo "                                                                              "
  echo "Version: $version                                                           "
  echo "                                                                              "
  echo "Usage:                                                                        "
  echo "  See below.                                                                  " 
  echo "                                                                              " 
  echo "Options:                                                                      " 
  echo "  -b                batch mode; used when piping in msg via stdin             " 
  echo "  -B  file          define bottom template; default is ./vee-bottom.tpl       " 
  echo "  -c  [1-9\d*]      specify the number of characters 'fold' allows per line   " 
  echo "                    this only applies when 'fold' (-f) is used                " 
  echo "  -d  'publis_dir'  specify the directory .vee is in - defaults to PWD        " 
  echo "  -f  'format'      use defined format instead of the default, groff;         "
  echo "                    'groff', 'fold', and 'none' are supported out of the box  "
  echo "  -h                prints this blurb                                         " 
  echo "  -i  'custom.html' specify a custom index file over the default              "
  echo "  -I                force index file to be \"index.html\"                     "
  echo "  -l                edit latest post's *.raw; used with '-r' publishes changes;"
  echo "                    calls reformat automatically;                             " 
  echo "  -L  [1-9\d*]      edit the Nth latest, relative to last post; lp starts at 1"
  echo "  -m  'message ...' specify entry message at commandline and avoid vi         " 
  echo "  -n                lists all entries, newest first, then quits               "
  echo "  -o                lists all entries, oldest first, then quits               " 
  echo "  -p                see what *raw files don't have an entry in the index      "
  echo "  -P                forever deletes all *raw and formatted files associated with"
  echo "                    posts that are listed with -p;                            "
  echo "  -r  [1-9\d*]      reformats the Nth latest post                             "
  echo "  -R                reformats _all_ .vee/*.raw files; -c applies as well      "
  echo "  -s  "summary"     placed below title in index                               "
  echo "  -t  'title'       specify title at commandline and avoid annoying default prompt" 
  echo "  -T  file          define top template; default is ./vee-top.tpl             " 
  echo "  -v                version and exit                                          " 
  echo "  -x  hook          defines hook if not using default "./vee-pre"; hook       "
  echo "                    must be executable, i.e., chmod 755 vee-pre               "
  echo "                                                                              " 
  echo "Examples:                                                                     "
  echo "                                                                              " 
  echo "%vee                                                                          " 
  echo "                                                                              " 
  echo " user will be prompted for title and presented with vi                        "
  echo "                                                                              " 
  echo " if no default dir/files are found, they will be created                      "
  echo "                                                                              " 
  echo "%vee -t \"this is the title\"                                                 "
  echo "                                                                              " 
  echo " user will just be presented with a vi session;                               "
  echo "                                                                              " 
  echo "%cat text.txt | vee -b -t \"my title\" -m \"text to go before stdin\"         " 
  echo "                                                                              " 
  echo " publishes contents of text.txt with provided title; -m's msg will be         " 
  echo " shown above the cat'd text                                                   " 
  echo "                                                                              " 
  echo "%vee -l       # edit and reformat the latest post                             " 
  echo "%vee -L 5     # allows one to edit and reformats the fifth latest post        " 
  echo "%vee -r 8     # reformats the 8th latest post                                 " 
  echo "%vee -R       # reformats ALL posts that have *.raw files                     " 
  echo "                                                                              " 
  echo "To delete a post forever:                                                     " 
  echo "1) delete the entry in the index                                              " 
  echo "2) purge the entry:                                                           "
  echo "  %vee -p    # make sure it is the one you want to purge                       "
  echo "  %vee -P    # purge it!                                                       "
  echo "                                                                              " 
  echo " brings up the latest entry as a vi sessions; when changes are save,          " 
  echo " all messages are reformatted                                                 " 
  echo "                                                                              " 
  echo "Notes:                                                                        "
  echo "                                                                              " 
  echo "1. Batch mode looks for piped input via STDIN; if none after a short time,    "
  echo "   message creation fails UNLESS something was passed in via '-m' as well.    " 
  echo "   If nothing was passed in via '-t' for the title, some default is used;     "
  echo "   This is set at the top of the script as 'default_title'.                   "
  echo "                                                                              " 
  echo "2. Interactive mode (default) prompts for a title if no '-t' is provided.     "
  echo "   Such is the case even if '-m' is used.  If '-m' is not used in this        "
  echo "                                                                              " 
  echo "3. Patches are welcome; the goal is not more feature bloat, but a nicer       "
  echo "   way of dealing with standard in, etc would be welcomed.                    " 
  echo "                                                                              " 
  disclaimer 
  exit 1
}

# formats post link on index page
 default_update_index() 
{ echo "<!-- ;$sec; -->$published:<a href=\"$dir/$sec.$time.$format\"> $title</a>" >> $index
  if [ -n "$summary" ]; then
	sec=$(expr "$sec" - 1)
    echo "<!-- ;$sec; -->$summary" >> "$index"
  fi
}

 output_top()
{ echo "$headertxt" > "$final"
  if [ -e "$top_tpl" ]; then
     cat "$top_tpl" >> "$final"
     echo "<pre>"   >> "$final"
   else
     echo "<!-- <?xml version=\"1.0\" encoding=\"UTF-8\" ?> --><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\">"  >> "$final"
     echo "<meta http-equiv=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">" >> "$final"
     echo "<head><title>$title - $date</title></head>"  >> "$final"
     echo "<body>"  >> "$final"
     echo "<pre>"   >> "$final"
     echo "<a href=\"../$index\">[index]</a><a href=\"./$rawname\">[raw]</a><a href=\"../\">[main]</a>" >> "$final"
   fi
   echo           >> "$final"
}

 output_bottom()
{ echo          >> "$final"
  echo --       >> "$final"
  echo "$footertxt" >> "$final"
  if [ -e "$bot_tpl" ]; then
    cat "$bot_tpl" >> "$final"
  else
    echo "</pre>" >>  "$final"
    echo "</body>" >>  "$final"
    echo "</html>" >>  "$final"
  fi
} 

# begin formatting funcs

 format_with_groff()
{ #sed 1liner from http://sed.sourceforge.net/sed1line.txt
  groff -man -Tascii "$raw" >> bla.raw
  sed '/^$/N;/\n$/D' bla.raw >> "$final"
  rm bla.raw
#  groff -man -Tascii "$raw" >> "$final"
}

 with_no_formatting()
{ cat "$raw" >> "$final"
} 

 format_with_fold()
{ if [ 0 -lt $margin ]; then
    fold -s -w $margin "$raw" >> "$final"
  else
    with_no_formatting 
  fi
}

#
# all hooks must accepted STDIN and output via STDOUT
# default arguments include:
#
 preformat()
{ if [ -e "$preformat_hook" ]; then
    if [ -x "$preformat_hook" ]; then
      cat "$draft" | "$preformat_hook" "$format_func" > "$draft.tmp" 
      mv -f "$draft.tmp" "$draft" 
    fi
  fi 
}

# postformat()
#{ if [ -x "$postformat_hook" ]; then
#    cat "$final" | "$postformat_hook" > "$final.tmp" 
#    mv -f "$final.tmp" "$final" 
#  fi 
#}

 format_main()
{ final=$dir/$1}
  finalname=$1
  raw=$dir/$2
  rawname=$2
  preformat
  # save raw form before formatting if it doesn't exist
  # which is the case when reformatting all
  if [ ! -e "$raw" ]; then
    echo "$date"   > "$raw"     # in raw, line 1 is date
    echo          >> "$raw"
    echo "$title" >> "$raw"     # in raw, line 2 is title
    echo          >> "$raw"
    echo "--"     >> "$raw"
    echo          >> "$raw"     # this blank line is important
    cat "$draft"  >> "$raw"
  fi
  $output_top 
  $format_func 
  $output_bot 
  #postformat # not sure about this one yet
}

 reformat_singleton()
{  if [ -e "$dir/$1.raw" ]; then
     #echo "Reformatting message: \"$1\""
     cat "$dir/$1.raw" > "$draft"
     format_main "$1.$format" "$1.raw"
   fi
}

 reformat_all()
{ files=$(ls -c "$dir"/*.raw | "$sort_oldest")
   for raw in "$files"; do
     # From: Randall R Schulz <rrschulz at cris dot com>
     fullname="$raw"
     dir=${fullname%/*}
     file=${fullname##*/}
     maxbase=${file%.*}
     minbase=${file%%.*}
     maxsuf=${file#*.}
     minsuf=${file##*.}
     reformat_singleton "$maxbase"
   done
}

 newest_first() 
{ files=$(ls -c "$dir"/*.raw | "$sort_newest")
  echo "$files"
}

 list_newest_first()
{ files=$(newest_first)
  count=1
  for file in "$files"; do
     fullname=$file
     dir=${fullname%/*}
     file=${fullname##*/}
     maxbase=${file%.*}
	 title=$(head -n 3 "$dir/$file" | tail -n 1) 
     printf "%7d)  " "$count"
     echo "$maxbase ::  $title"
	 count=$(expr $count + 1)
  done
}

 oldest_first()
{ files=$(ls -c "$dir"/*.raw | "$sort_oldest")
  echo "$files"
}

 list_oldest_first()
{ files=$(oldest_first)
  for file in "$files"; do
     fullname=$file
     dir=${fullname%/*}
     file=${fullname##*/}
     maxbase=${file%.*}
	 title=$(head -n 3 "$dir/$file" | tail -n 1) 
     echo "$maxbase ::  $title"
  done
}

 get_path2post()
{ files=$(ls -c "$dir"/*.raw | "$sort_newest")
  goal=$1
  count=1
  for file in "$files"; do
     fullname=$file
     dir=${fullname%/*}
     file=${fullname##*/}
     maxbase=${file%.*}
    if [ "$count" -eq "$goal" ]; then
     echo "$maxbase"
     break
    fi
	count=$(expr "$count" + 1)
  done
}

 purge_entries()
{ level=$1 
  count=0
  if [ ! -e "$index" ]; then
    echo "can't find index, \"$index\""
    die_cleanly
  fi
  files=$(newest_first)
  for file in "$files"; do
     fullname=$file
     dir=${fullname%/*}
     file=${fullname##*/}
     maxbase=${file%.*}
	 entry=$(grep "$maxbase" "$index")
     if [ -z "$entry" ]; then
	   count=$(expr "$count" + 1)
       if [ "$level" -eq 1 ]; then
         echo "$dir/$file (not really purged, use -P for realz)"
       elif [ "$level" -eq 2 ]; then
         echo "$dir/$maxbase[.raw,$format] (purged for realz)"
         rm -f "$dir/$maxbase"*
       fi
     fi
  done
  echo "removed $count entrie(s)..."
}

 die_cleanly()
{ if [ -e "$draft" ]; then
    rm -f "$draft"
  fi
  exit 0
}

post2reformat=0
reformatall=0
purgelevel=0
post2edit=0
summary=
message=
set_default_format_func=

# get opts ! stdin append to anything passed in by -m 
while getopts 'f:m:t:T:c:d:i:IbB:hRr:lL:novx:X:Pps:' option; do
    case $option in
    i) index=$optarg  # specify index to $optarg
       ;;
    I) index="index.html" # force index to index.html
       ;;
    d) if [ -d "$optarg" ]; then
         cd "$optarg"
       else
         echo "$optarg" is not a directory!
         die_cleanly
       fi
       ;;
    r) post2reformat=$optarg
       ;;
    r) reformatall=1
       ;;
    b) listenstdin=1 
       use_editor=0
       ;;
    b) bot_tpl=$optarg
       ;;
    f) set_default_format_func=$optarg
       ;;
    c) margin=$optarg # this option is about to be deprecated
       ;;
    l) post2edit=1
       ;;
    l) post2edit=$optarg
       ;;
    m) message=$optarg 
       use_editor=0
       ;;
    n) list_newest_first
       die_cleanly 
       ;;
    o) list_oldest_first
       die_cleanly 
       ;; 
    s) summary=$optarg
       ;; 
    t) title=$optarg
       ;;
    t) top_tpl=$optarg
       ;;
    v) echo $version
       die_cleanly
       ;;
    p) purgelevel=1
       ;; 
    p) purgelevel=2 
       ;; 
    h) usage
       die_cleanly
       ;;
    x) preformat_hook=$optarg
       ;; 
    ?) #usage | less
       die_cleanly
       ;;
    esac
done

 post_opts() 
{ if [ -e "$format_custom_defs" ]; then
    . "$format_custom_defs"
  fi

  if [ -n "$set_default_format_func" ]; then 
    "$format_dispatcher" "$optarg"  # default is set_format_func
  fi

  if [ "$purgelevel" -ge 1 ]; then
    purge_entries "$purgelevel"
    die_cleanly
  fi 

  if [ "$post2edit" -ge 1 ]; then
	latest=$(get_path2post "$post2edit")
    $EDITOR "$dir/$latest.raw"
    post2reformat=$post2edit
  fi

  if [ "$post2reformat" -ge 1 ]; then
	latest=$(get_path2post "$post2reformat")
    reformat_singleton "$latest"
    die_cleanly
  fi

  # if "-R", or reformat all, is set 
  if [ "$reformatall" -eq 1 ]; then
    # future may yield seperate "rebuild reindex" functionality 
    reformat_all
    die_cleanly
  fi

  # blocks vee -l (without the -r) from going on 
  if [ "$post2edit" -ge 1 ]; then
    die_cleanly
  fi

  # Batch message creation: -m and stdin
  # handles -m
  if [ -n "$message" ]; then
    echo "$message" >> "$draft"
  fi

  if [ $listenstdin -eq 1 ]; then
    IFS="" # ensures that leading spaces are retained
    while read -r IN <&0 ; do # break after 1 sec of no stdin
      echo "$IN"            # echo's stdin back out so user can see 
      echo "$IN" >> "$draft" 
      listenstdin=1
      use_editor=0
    done
  fi
}

# generates index file if none exists
 default_setup()
{ mkdir -p "$dir" || echo "$dir" exists...
  if [ ! -e "$index" ]; then
    echo
    echo "...creating $index"
    echo "<!-- ;10000000000000000000000000; open pre tag --><!-- <?xml version=\"1.0\" encoding=\"UTF-8\" ?> --><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>my vee index</title><meta http-equiv=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\"></head><body><pre>" >> "$index"
   # header stuff
    echo "<!-- ;100000000000000000000000; fixed content -->" >> "$index"
    echo "<!-- ;10000000000000000000000;  fixed content -->" >> "$index"
    echo "<!-- ;1000000000000000000000;   fixed content -->" >> "$index"
   # footer stuff
    echo "<!-- ;3; fixed content -->" >> "$index"
    echo "<!-- ;2; fixed content -->" >> "$index"
    echo "<!-- ;1; fixed content -->Powered by <a href=\"http://www.0x743.com/vee\">vee</a>" >> "$index"
    echo "<!-- ;0; closing pre tag --></pre></body></html>" >> "$index"
    echo
  fi
}

 sort_index()
{
  # would like to figure out how to put this sort command into a variable, but thusfar not so successful
  sort -t';' +0f -1 +1nr "$index" > ".$index.$$.sorted"
  mv ".$index.$$.sorted" "$index" # "rebuild $index
}

 use_editor()
{ if [ $use_editor -eq 1 ]; then 
    ok=0
    $EDITOR "$draft" && ok=1
    if [ "$ok" -ne 1 ]; then
      echo there has been a problem with your editor session
      exit
    fi
  #else
    #echo ...vi mode off
  fi
}

# ask for title if not set with -t and not in batch mode
# if in batch mode with no -t set, use default title below
 get_title()
{ if [ -z "$title"  ]; then
    title=$default_title
  fi
}

 read_config()
{ if [ -e ./.veerc ]; then
    . ./.veerc
  fi
} 

#-- main program body

read_config   # done after all options are read in, could look in -d before
              # opts are processed though so opts could override defaults
              # and config file .. yeah do that
"$custom_setup" # can be defined in .veerc
post_opts
get_title 
use_editor

if [ -e "$draft" ]; then
  rawfile="$$.$sec.$time.raw" # uses process id, $$, assuming there will
                                  # not be duplicate process ids within 1 sec of each other
  format_main "$sec.$time.$format" "$rawfile" 
  "$update_index" 
  sort_index
  die_cleanly
else
  echo Error! "$draft" not found
fi

