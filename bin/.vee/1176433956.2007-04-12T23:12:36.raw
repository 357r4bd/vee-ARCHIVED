Thu Apr 12 23:12:36 EDT 2007

ragel state machine compiler

--

've been looking for a reason to use the Ragel State Machine Compiler for a long time, and because of a class that is having me look at asynchronous and distributed protocols I finally have one.

In a nutshell, Ragel is a meta language for describing an FSM implicitly using regular expressions.  It is meant to allow for the building of large and complex FSM based on smaller regular expressions and operators, such as union (or), concatenation, intersection, etc.  I personally think this is precisely the approach needed to build and use FSM to do useful things.  It requires some intuition regarding to the construction of an FSM based on regular expressions, but due practice easily gives one this.  This meta language is placed directly inside of a host language source file.  It currently supports C/C++, D, Object C, and Ruby.  You write your host language program assuming that the code to handle the FSM will be put in there.  So once it is written, the source code with the embedded Ragel meta description is "compiled" using the Ragel compiler.  After that happens, you must compiler it using the host lanaguage.  Ruby code obviously requires no compiling.

My need currently is to write a simulator for a distributed and asynchronous MAC protocol.  In addition to facilitating the book keeping of the simulation, I intend on facilitating the interaction of the node, all of which will have their own FSM, by intersecting some number of FSMs (in the case of a fully connected network topology).  

In fact, by utilizing the regular expression constructs properly I should be able to define any network topology that I wish.  Another cool thing is that since I am going to be defining the nodes independently, each node could actually have different FSMs.  In this case, they will be identical however.

I will definitely report back about my experience.  The more I learn about Ragel and think about how I might implement the protocol using regular expressions and event triggers, the more excited I get.

Cheers.
